import "ControlTests"
import "LiteralTests"
import "MethodTests"
import "ReflectionTests"
import "ClosureTests"

test = LiteralTests.new()

// test.methods.length.print()
// 
// original_count = Assert.failure_count()
// 
// test.setup()
// test.invoke(test.methods[0].name)
// test.teardown()
// 
// if (Assert.failure_count() > original_count)
// {
//     test.methods[0].name.print()
//     "Failed".print()
// }

test = LiteralTests.new()

test.setup()
test.test_boolean_literal_comparisons()
test.teardown()

test.setup()
test.test_integer_literal_comparisons()
test.teardown()

test = ControlTests.new()

test.setup()
test.test_if_executes_only_next_statement()
test.teardown()

test.setup()
test.test_if_executes_on_true_expression()
test.teardown()

test.setup()
test.test_if_executes_on_true_expression_with_local_variable()
test.teardown()

test.setup()
test.test_ifs_with_boolean_literals()
test.teardown()

test = MethodTests.new()

test.setup()
test.test_get_property()
test.teardown()

test.setup()
test.test_set_property()
test.teardown()

test = ReflectionTests.new()

test.setup()
test.test_class_name()
test.teardown()

test.setup()
test.test_self_class()
test.teardown()

test.setup()
test.test_self_class_name()
test.teardown()

test.setup()
test.test_method_names()
test.teardown()

test = ClosureTests.new()

test.setup()
test.test_integer_iterator()
test.teardown()

"*** Failure Count ***".print()
Assert.failure_count().print()
