implementation ClosureTestClass
{
    attribute value
    
    method value=(new_value)
    {
        value = new_value
    }
    
    method value
    {
        return value
    }
    
    method capture_attribute
    {
        return do { return value }
    }
}

implementation ClosureTests : Test.Case
{
    method test_integer_iterator()
    {
        count = 0
        
        10.times() do
        {
            count += 1
        }
        
        Assert.equal(10, to:count)
    }
    
    method test_integer_iterator_with_argument()
    {
        value = 0
        
        10.times() do (i)
        {
            value = i
        }
        
        // goes from 0 to 9
        Assert.equal(9, to:value)
    }
    
    method test_closure_definition()
    {
        f = do
        {
            return 5
        }
        
        Assert.equal(5, to:f.call())
    }
    
    method test_closure_definition_with_closed_variables()
    {
        value = 0
        
        f = do
        {
            value = 10
            return 5
        }
        
        Assert.equal(0, to:value)
        Assert.equal(5, to:f.call())
        Assert.equal(10, to:value)
    }
    
    method test_nested_closure_creation_with_closed_variables()
    {
        value = 10
        functions = Array.new()
        
        10.times() do
        {
            h = do
            {
                value = value + 1
                return value
            }
            
            functions.append(h)
        }
        
        Assert.equal(10, to:value)
        
        Assert.equal(11, to:functions[0].call())
        Assert.equal(12, to:functions[1].call())
        Assert.equal(13, to:functions[2].call())
        Assert.equal(14, to:functions[3].call())
        Assert.equal(15, to:functions[4].call())
        Assert.equal(16, to:functions[5].call())
        Assert.equal(17, to:functions[6].call())
        Assert.equal(18, to:functions[7].call())
        Assert.equal(19, to:functions[8].call())
        Assert.equal(20, to:functions[9].call())
        
        Assert.equal(20, to:value)
    }
    
    method argument_used_in_closure(value)
    {
        2.times() do (i)
        {
            value += 1
        }
        
        return value
    }
    
    method test_method_argument_in_closure()
    {
        Assert.equal(6, to:self.argument_used_in_closure(4))
    }
    
    method test_self_in_closure()
    {
        function = do
        {
            Assert.equal("ClosureTests", to:self.class.name)
        }
        
        function.call()
    }
    
    method test_self_in_nested_closure()
    {
        value = 0
        
        function = do
        {
            sub_function = do
            {
                Assert.equal("ClosureTests", to:self.class.name)
                value = 10
            }
            
            sub_function.call()
        }
        
        function.call()
        
        Assert.equal(10, to:value)
    }
    
    method test_closure_argument_in_nested_closure()
    {
        value = 0
        
        2.times() do (i)
        {
            2.times() do (j)
            {
                value += i + j
            }
        }
        
        Assert.equal(4, to:value)
    }
    
    method test_closure_captures_attribute()
    {
        obj = ClosureTestClass.new()
        obj.value = "hello"
        
        function = obj.capture_attribute()
        
        Assert.equal("hello", to:function.call())
    }
}
