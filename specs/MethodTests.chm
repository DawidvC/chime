implementation MethodTests : Test.Case
{
    attribute meaning
    
    method setup()
    {
        meaning = 42
    }
    
    // Support methods used as test fixtures
    property meaning_of_life(value)
    {
        get
        {
            return meaning
        }
        set
        {
            meaning = value
        }
    }
    
    method test_get_property()
    {
        Assert.equal(self.meaning_of_life, to:42)
    }
    
    method test_set_property()
    {
        self.meaning_of_life = 43
        
        Assert.equal(self.meaning_of_life, to:43)
    }
    
    method return_nil_implicitly()
    {
    }
    
    method return_nil_explicitly()
    {
        return nil
    }
    
    method test_return_nil()
    {
        Assert.is_nil(self.return_nil_implicitly())
        Assert.is_nil(self.return_nil_explicitly())
    }
    
    method return_one_argument(a)
    {
        return a
    }
    
    method return_one_typed_argument(Object a)
    {
        return a
    }
    
    method typed_return_one_typed_argument(Object; Object a)
    {
        return a
    }
    
    method test_return_argument()
    {
        Assert.equal(1, to:self.return_one_argument(1))
        Assert.equal(2, to:self.return_one_typed_argument(2))
        Assert.equal(3, to:self.typed_return_one_typed_argument(3))
    }
    
    method fully_typed_add(Integer; Integer a, to:Integer b)
    {
        return a + b
    }
    
    method untyped_add(a, to:b)
    {
        return a + b
    }
    
    method test_methods_with_labels()
    {
        Assert.equal(3, to:self.fully_typed_add(1, to:2))
        Assert.equal(3, to:self.untyped_add(1,     to:2))
    }
    
    class method class_method_example()
    {
        return 42
    }
    
    method class_method_example()
    {
        return 43
    }
    
    method test_class_method()
    {
        Assert.equal(42, to:MethodTests.class_method_example())
        Assert.equal(43, to:self.class_method_example())
    }
}
