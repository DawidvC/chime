implementation MethodTests : Test.Case
{
    attribute meaning
    
    method setup()
    {
        meaning = 42
    }
    
    // Support methods used as test fixtures
    method meaning_of_life
    {
        return meaning
    }
    
    method meaning_of_life=(value)
    {
        meaning = value
    }
    
    method test_get_property()
    {
        Assert.equal(42, to:self.meaning_of_life)
    }
    
    method test_set_property()
    {
        self.meaning_of_life = 43
        
        Assert.equal(43, to:self.meaning_of_life)
    }
    
    method return_nil_implicitly()
    {
    }
    
    method return_nil_explicitly()
    {
        return nil
    }
    
    method test_return_nil()
    {
        Assert.is_nil(self.return_nil_implicitly())
        Assert.is_nil(self.return_nil_explicitly())
    }
    
    method return_one_argument(a)
    {
        return a
    }
    
    method return_one_typed_argument(Object a)
    {
        return a
    }
    
    method typed_return_one_typed_argument(Object; Object a)
    {
        return a
    }
    
    method test_return_argument()
    {
        Assert.equal(1, to:self.return_one_argument(1))
        Assert.equal(2, to:self.return_one_typed_argument(2))
        Assert.equal(3, to:self.typed_return_one_typed_argument(3))
    }
    
    method fully_typed_add(Integer; Integer a, to:Integer b)
    {
        return a + b
    }
    
    method untyped_add(a, to:b)
    {
        return a + b
    }
    
    method test_methods_with_labels()
    {
        Assert.equal(3, to:self.fully_typed_add(1, to:2))
        Assert.equal(3, to:self.untyped_add(1,     to:2))
        
        method_names = self.methods.map() do (x) { return x.name }
        
        Assert.is_true(method_names.contains?("untyped_add:to:"))
        Assert.is_false(method_names.contains?("untyped_add"))
    }
    
    class method class_method_example()
    {
        return 42
    }
    
    method class_method_example()
    {
        return 43
    }
    
    method test_class_method()
    {
        Assert.equal(42, to:MethodTests.class_method_example())
        Assert.equal(43, to:self.class_method_example())
    }
    
    indexer self[i](value)
    {
        get
        {
            return meaning * i
        }
        set
        {
            meaning = value * i
        }
    }
    
    method test_self_indexer()
    {
        Assert.equal( 0, to:self[0])
        Assert.equal(42, to:self[1])
        
        self[2] = 3
        
        Assert.equal( 6, to:self[1])
        Assert.equal(12, to:self[2])
    }
    
    operator +(value)
    {
        return meaning + value
    }
    
    operator -(value)
    {
        return meaning - value
    }
    
    operator /(value)
    {
        return meaning / value
    }
    
    operator %(value)
    {
        return meaning % value
    }
    
    operator <=>(value)
    {
        return meaning <=> value
    }
    
    operator ===(value)
    {
        return meaning === value
    }
    
    method test_arithemetic_operators()
    {
        meaning = 10
        
        Assert.equal(11, to:self + 1)
        Assert.equal( 9, to:self - 1)
        Assert.equal( 5, to:self / 2)
        Assert.equal( 1, to:self % 3)
    }
    
    method test_case_comparison()
    {
        meaning = 10
        value = 0
        
        switch self
        {
            case 10
                value = 5
            else
                Assert.failure()
        }
        
        Assert.equal(5, to:value)
    }
}
