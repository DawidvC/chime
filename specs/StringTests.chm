implementation StringTests : Test.Case
{
    method test_string_literal_indexer_get()
    {
        r = Range.new()
        r.start = 0
        r.end   = 2
        
        Assert.equal("Abc", to:"AbcDef"[r])
        Assert.equal("Abc", to:"AbcDef"[0:2])
        
        r.start = 3
        r.end   = -1
        
        Assert.equal("Def", to:"AbcDef"[r])
        Assert.equal("Def", to:"AbcDef"[3:-1])
    }
    
    method test_string_length()
    {
        Assert.equal(7, to:"1234567".length)
    }
    
    method test_string_concatenation()
    {
        Assert.equal("abcdef", to:"abc" + "def")
        Assert.equal("abc",    to:"abc" + "")
        Assert.equal("abc",    to:"" + "abc")
    }
    
    method test_string_concatenation_with_nonstring_objects()
    {
        Assert.equal("abc123", to:"abc" + 123)
    }
    
    method test_string_comparison()
    {
        Assert.is_true("abc" == "abc")
        Assert.is_false("abc" == "def")
    }
    
    method test_string_interpolation()
    {
        Assert.equal("1 2 3",       to:"1 2 {1 + 2}")
        Assert.equal(" 1 2 3",      to:" {1} 2 3")
        Assert.equal("{1} {2} {3}", to:"1 2 3")
    }
    
    method test_method_call_in_string_interpolation()
    {
       Assert.equal("1 2 3", to:"1 {2.to_string()} 3")
    }
    
    method test_carriage_return_in_string()
    {
        Assert.equal(6, to:"hello\n".length)
    }
}
