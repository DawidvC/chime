{	scopeName = 'source.chime';
	comment = 'This is textmate syntax grammer for chime';
	fileTypes = ( 'chi', 'chm' );
	foldingStartMarker = '\b(namespace|interface|implementation|method|property)\b';
	foldingStopMarker = '(})';
	patterns = (
		{	name = 'comment.line.double-slash.chime';
			begin = '//';
			end = '$\n?';
		},
		{	match = '\b(if|while|for|return|switch|case|default|else|next)\b';
			name = 'keyword.control.chime';
		},
		{	match = '(namespace|implementation|interface|import)\s+([\w\.]+)';
			captures = {
				1 = { name = 'keyword'; };
				2 = { name = 'entity.name.type.chime'; };
			};
		},
		{	match = '\b(self|super)\b';
			name = 'keyword.control.chime';
		},
		{	match = '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b';
			name = 'constant.numeric.chime';
		},
		{	match = '((class\s*)?method|property|indexer|operator)\s+(\w+)';
			captures = {
				1 = { name = 'keyword'; };
				3 = { name = 'entity.name.function.chime'; };
			};
		},
		{	match = '\b([A-Z]\w+)\b';
			name = 'support.type';
		},
		{	match = ',\s*(\w+:)';
			name = 'support.function';
		},
		{	match = '(:)\s+(\w*)';
			captures = {
				1 = { name = 'keyword.operator'; };
				2 = { name = 'entity.other.inherited-class'; };
			};
		},
		{	name = 'string.quoted.double.untitled';
			begin = '"';
			end = '"';
			patterns = (
				{	name = 'constant.character.escape.untitled';
					match = '\\.';
				},
			);
		},
	);
}