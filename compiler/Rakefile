require 'rake/clean'

COMPILER         = "c++"
COMPILER_COMMAND = "#{COMPILER} -Wall -I/opt/local/include -L/opt/local/lib"
BUILD_PATH       = "/tmp/chime"

CLEAN.include("#{BUILD_PATH}/*")

# FileLists
ALL_SOURCES      = FileList['**/*.cpp']
MAIN_SOURCES     = FileList['ast/**/*.cpp', 'lexer/**/*.cpp', 'parser/**/*.cpp']
FRONTEND_SOURCES = FileList['frontend/**/*.cpp']
TEST_SOURCES     = FileList['tests/**/*.cpp']

ALL_OBJS         = ALL_SOURCES.map      { |x| BUILD_PATH + '/' + x.ext('o') }
MAIN_OBJS        = MAIN_SOURCES.map     { |x| BUILD_PATH + '/' + x.ext('o') }
FRONTEND_OBJ     = FRONTEND_SOURCES.map { |x| BUILD_PATH + '/' + x.ext('o') }
TEST_OBJ         = TEST_SOURCES.map     { |x| BUILD_PATH + '/' + x.ext('o') }

# Rules
ALL_SOURCES.each_with_index do |source_file, i|
  object_file = ALL_OBJS[i]
  
  file object_file => source_file do
    # make sure we have a path to put to the o file in
    FileUtils.mkpath(File.dirname(object_file))
    
    sh "#{COMPILER_COMMAND} -c #{source_file} -o #{object_file}"
  end
end

# Dependancies
file "#{BUILD_PATH}/ast/node.o"                        => ['ast/node.cpp', 'ast/node.h']
file "#{BUILD_PATH}/ast/control/if_statement.o"        => ['ast/control/if_statement.h', 'ast/node.h']
file "#{BUILD_PATH}/ast/control/next.o"                => ['ast/control/next.h', 'ast/node.h']
file "#{BUILD_PATH}/tests/parser/basic_parser_tests.o" => ['tests/parser/basic_parser_tests.cpp']
file "#{BUILD_PATH}/tests/lexer_tests.o"               => ['tests/lexer_tests.cpp', 'lexer/string_lexer.h']

file "#{BUILD_PATH}/chime_test" => ALL_OBJS do
  sh "#{COMPILER_COMMAND} -lgtest -lgtest_main -o #{BUILD_PATH}/chime_test #{MAIN_OBJS} #{TEST_OBJ}"
end

file "#{BUILD_PATH}/chime" => ALL_OBJS do
  sh "#{COMPILER_COMMAND} -o #{BUILD_PATH}/chime #{MAIN_OBJS} #{FRONTEND_OBJ}"
end

# Tasks
task :default => :test

desc 'Run the test binary'
task :test => ["#{BUILD_PATH}/chime_test"] do
  sh "#{BUILD_PATH}/chime_test"
end

desc 'Build the main binary'
task :build => ["#{BUILD_PATH}/chime"]
