<%= render("features_navigation") %>

<section>
  <h2>Closures</h2>
  <code>
<span class="comment">// Here's a method that accepts a function as one of its arguments</span>
<span class="keyword">method</span> <span class="function">use_block</span>(<span class="entity">Number</span>; <span class="entity">Function</span>(<span class="entity">Number</span>;) block_argument)
{
    <span class="keyword">return</span> <span class="function">block_argument</span>() * <span class="literal">2</span>
}

<span class="keyword">method</span> <span class="function">empty_block</span>(<span class="entity">Number</span>; <span class="entity">Function</span> block_argument)
{
    <span class="comment">// Blocks follow the same rules as methods.  They return an Object</span>
    <span class="comment">// unless otherwise specified, and they can implicitly return nil</span>
    <span class="function">block_argument</span>()
}

<span class="comment">// These are some examples of anonymous functions/blocks</span>
<span class="keyword">method</span> <span class="function">more_blocks</span>(<span class="entity">Number</span> x)
{
    <span class="entity">Number</span> value
    
    <span class="comment">// pass in an anonymous function</span>
    value = <span class="function">use_block</span>(<span class="keyword">do</span> (<span class="entity">Number</span>;) { <span class="keyword">return</span> <span class="literal">5</span> })
    
    <span class="comment">// this notation is equivalent for the <strong>last</strong> argument only</span>
    value = <span class="function">use_block</span>() <span class="keyword">do</span> (<span class="entity">Number</span>;)
    { 
        <span class="keyword">return</span> <span class="literal">5</span>
    }
    
    <span class="comment">// arguments are not required if there are none</span>
    <span class="function">empty_block</span>(<span class="keyword">do</span> { <span class="function">do_something</span>(value) })
    
    <span class="comment">// you can assign to local variables, but this</span>
    <span class="comment">// just passes in the address of the variable.  Depending</span>
    <span class="comment">// on when the block is executed, this could be bad</span>
    <span class="function">empty_block</span>() <span class="keyword">do</span>
    {
        value = <span class="function">do_something</span>(<span class="literal">0</span>)
    }
}

<span class="comment">// Functions are just another type</span>
<span class="keyword">method</span> <span class="function">function_type</span>()
{
    <span class="entity">Function</span>(<span class="entity">Number</span>; <span class="entity">Number</span>, <span class="entity">Number</span> <span class="function">and:</span>) sum
    
    sum = <span class="keyword">do</span> (<span class="entity">Number</span>; <span class="entity">Number</span> x, <span class="entity">Number</span> <span class="function">and:</span>y)
    {
        <span class="keyword">return</span> x + y
    }
    
    <span class="function">sum</span>(<span class="literal">1</span>, <span class="function">and:</span><span class="literal">1</span>)
}

<span class="comment">// But, have no fear, dynamic typing is still supported</span>
<span class="keyword">method</span> <span class="function">function_dynamic_type</span>()
{
    sum = <span class="keyword">do</span> (x, <span class="function">and:</span>y)
    {
        <span class="keyword">return</span> x + y
    }
    
    <span class="function">sum</span>(<span class="literal">1</span>, <span class="function">and:</span><span class="literal">1</span>)
}
  </code>
</section>
