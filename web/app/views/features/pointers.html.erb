<%= render("features_navigation") %>

<section>
  <h2>Pointers</h2>
  <code>
<span class="comment">// Before we get to implementations, let's take a look at Pointers.</span>
<span class="comment">// In Chime, a pointer is a Pseudo-Object.  That is, it's a value type</span>
<span class="comment">// that acts a lot like a true object to the programmer</span>
<span class="keyword">interface</span> <span class="entity">Pointer</span> : <span class="superclass">ValueType</span>
{
    <span class="comment">// This is the address this Pointer object references</span>
    <span class="keyword">property</span> <span class="function">value</span>(<span class="entity">Natural</span>; <span class="entity">Natural</span>)
    
    <span class="comment">// The Type this pointer points to.  Setting this is</span>
    <span class="comment">// required if you want to do pointer arithmetic.</span>
    <span class="keyword">property</span> <span class="function">reference</span>(<span class="entity">Type</span>; <span class="entity">Type</span>)
    
    <span class="comment">// This pseudo-method dereferences a pointer as the specified type.</span>
    <span class="comment">// The empty return value means there is a return, but it is</span>
    <span class="comment">// determined at run time (actually compile-time)</span>
    <span class="keyword">method</span> <span class="function">deref_as</span>(<span class="entity">Type</span>; <span class="entity">Type</span>)
    
    <span class="comment">// C-style offset-then-deref</span>
    <span class="keyword">indexer</span> <span class="keyword">self</span>[<span class="entity">Integer</span> index](<span class="entity">Type</span>;)</span>
    
    <span class="comment">// If 'reference' is set, no need to specify the type</span>
    <span class="keyword">method</span> <span class="function">deref</span>(<span class="entity">Type</span>;)
}

<span class="comment">// Here is some example usage</span>
<span class="entity">Pointer</span> p
<span class="entity">Integer</span> int

<span class="comment">// Imagine there is a MyStructure at 0x1234</span>
p.<span class="function">value</span> = <span class="literal">0x1234</span>

p.<span class="function">deref_as</span>(<span class="entity">MyStructure</span>).<span class="function">three_bit_integer</span>++

int = <span class="literal">0x1234</span>

<span class="comment">// 'to_pointer' is another pseudo-method of Integer and</span>
<span class="comment">// Natural that returns a Pointer representation.</span>
<span class="comment">// The value of p is now whatever was in int (0x1234)</span>
p = int.<span class="function">to_pointer</span>()

<span class="comment">// 'address' is the equivalent of '&amp;' in C and works</span>
<span class="comment">// for all value types</span>
p = int.<span class="function">address</span>

p.<span class="function">deref_as</span>(<span class="entity">Integer</span>).<span class="function">to_pointer</span>().<span class="function">deref_as</span>(<span class="entity">MyStructure</span>)
  </code>
</section>
