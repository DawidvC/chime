<%= render("features_navigation") %>

<section>
  <h2>Interfaces</h2>
  <code>
<span class="comment">// An interface is a Trait - like a Ruby mixin or Perl Role.  An interface can capture a specific</span>
<span class="comment">// kind of functionality, and can be more easily organized and shared than a strict</span>
<span class="comment">// inheritance model can support.  They do not support inheritance themselves.</span>
<span class="comment">// </span>
<span class="comment">// Interfaces can then be applied via the include keyword</span>
<span class="comment">// </span>
<span class="comment">// Also, check out the namespacing with the dot syntax</span>
<span class="keyword">interface</span> <span class="entity">Collection</span>.<span class="entity">Enumerable</span>
{
    <span class="keyword">property</span> <span class="function">length</span>(<span class="entity">Number</span>;)
    {
        <span class="comment">// size is the canonical method, and must be defined by any classes that conform to this interface </span>
        <span class="keyword">return</span> <span class="keyword">self</span>.<span class="function">size</span>
    }
    <span class="keyword">property</span> <span class="function">count</span>(<span class="entity">Number</span>;)
    {
        <span class="keyword">return</span> <span class="keyword">self</span>.<span class="function">size</span>
    }
    
    <span class="keyword">method</span> <span class="function">each</span>(<span class="entity">Function</span>(<span class="entity">Object</span>) block)
    {
        <span class="keyword">self</span>.<span class="function">size</span>.<span class="function">times</span>() <span class="keyword">do</span> (i)
        {
            block.<span class="function">call</span>(<span class="keyword">self</span>[i])
        }
    }
}

  </code>
</section>
