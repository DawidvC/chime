<%= render("features_navigation") %>

<section>
  <h2>Object Life Cycle</h2>
  <code>
<span class="comment">// Classes all follow a simple retain counting mechanism</span>
<span class="entity">MyObject</span> obj

<span class="comment">// Retain count of +1</span>
obj = <span class="entity">MyObject</span>.<span class="function">new</span>()

<span class="comment">// Retain count of +2</span>
obj.<span class="function">retain</span>()

<span class="comment">// Retain count of +1</span>
obj.<span class="function">release</span>()

<span class="comment">// Retain count of 0, deallocated</span>
obj.<span class="function">release</span>()

<span class="comment">// This introduces a problem with functions/methods that</span>
<span class="comment">// return values.  How does a caller (and the compiler) know</span>
<span class="comment">// that ownership is being transferred?</span>

<span class="keyword">function</span> <span class="function">new_object</span>(<span class="keyword">retained</span>;)
{
    <span class="keyword">return</span> <span class="entity">MyObject</span>.<span class="function">new</span>()
}

<span class="comment">// The compiler (and hopefully you) know that you</span>
<span class="comment">// own this return value</span>
obj = <span class="function">new_object</span>();
  </code>
</section>
